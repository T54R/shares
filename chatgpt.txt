<?php 
defined("_WA_SITE_CONSTRUCTOR") or die("Access denied");

function isAdminPanel() { return _WA_SITE_CONSTRUCTOR == "admin"; }

function liveSite($path=null, $isAdmin=null)
{
  if (isFullLink($path)) return $path;
  if ($isAdmin === null) $isAdmin = isAdminPanel();
  $result = configValue("liveSite");
  if ($isAdmin) $result .= "/" . adminPanelFolder();
  if ($path) $result .= "/" . $path;
  return $result;
}

function absolutePath($path=null, $isAdmin=null)
{
  if ($isAdmin === null) $isAdmin = isAdminPanel();
  $result = configValue("absolutePath");
  if ($isAdmin) $result .= "/" . adminPanelFolder();
  if ($path) $result .= "/" . $path;
  return $result;
}

function adminPanelFolder()
{
  return configValue("adminPanelFolder") ? configValue("adminPanelFolder") : "admin";
}

function siteUrl($path=null) { return liveSite($path, false); }
function sitePath($path=null) { return absolutePath($path, false); }

function F069bd4b7() { return $GLOBALS["project"]; }
function object($object) { return $object; }

function show($object)
{
  if (is_array($object)) { $container = F606c225c::create($object); return $container->show(); }
  if (is_a($object, "waControl") || is_a($object,  "F77a46e6c")) return $object->show();
  if (!is_object($object)) return $object;
  return json_encode($object);
}

function Result($object)
{
  if (is_a($object,  "F77a46e6c")) return $object->Result();
  return $object;
}

function classObject($className) { return new $className(); }
function dbError() { return F069bd4b7()->database->lastError(); }
function affectedRows() { return F069bd4b7()->database->affectedRows(); }
function lastInsertId() { return mysqli_insert_id(F069bd4b7()->database->_resource); }
function isFullLink($link) { if ($link) return stristr($link, "http://") || stristr($link, "https://"); }
function isExternalLink($link) 
{ 
  if (!isFullLink($link)) return false;
  return strpos($link, liveSite(null, false)) !== 0;
}

function makeUrl($href, $external=false, $isAdminPanel=null)
{
  if (!$href) return;
  if ($isAdminPanel === null) $isAdminPanel = F069bd4b7()->isAdminPanel();
  if ($href == F069bd4b7()->homeUrl(null, $isAdminPanel)) return $href;
  if (!isFullLink($href))
  {
    if (!$external && !isExternalLink($href)) return addUrlLang($href, $isAdminPanel);
    if ($external && !isExternalLink($href)) return "http://" . $href;
  }
  return $href;
}

function urlLang($url)
{
  $url = removeBaseUrl($url);
  $urlArray = explodeOf("/", $url);
  return F069bd4b7()->langField($urlArray[0], "prefix");
}

function addUrlLang($url, $isAdminPanel=null, $lang=null)
{
  $url = removeBaseUrl($url);
  if ($isAdminPanel === null) $isAdminPanel = F069bd4b7()->isAdminPanel();
  if ($lang === null) $lang = F069bd4b7()->lang;
  if (!$isAdminPanel && F069bd4b7()->multiLang  ) return $lang . "/" . $url; else return $url;
}

function removeUrlLang($url)
{
  $url = removeBaseUrl($url);
  $urlArray = explodeOf("/", $url);
  $lang = urlLang($url);
  if ($lang) $urlArray = array_slice($urlArray, 1); 
  if (!isEmpty($urlArray)) return implode("/", $urlArray); 
}


function pageUrl($page=null, $isAdminPanel=null) 
{ 
  if (isFullLink($page)) return $page;
  if ($isAdminPanel === null) $isAdminPanel = F069bd4b7()->isAdminPanel();
  return liveSite(addUrlLang($page, $isAdminPanel), $isAdminPanel); 
}

function cssUrl($src, $mode=null)
{
  if (!isFullLink($src)) $src = imagePath($src);
  return "url(" . $src . ")" . ifElse($mode, " " . $mode);
}
function bgImage($src, $mode="no-repeat") { return "background: " . cssUrl($src, $mode) . ";"; }
function backgroundImage($src) { return "background-image: " . cssUrl($src) . ";"; }

function isSystemFolder($filename) { $arr = explodeOf("_", $filename); return (@$arr[0] == "sys"); }

function templatePath($path, $isAdmin=null) { return liveSite("project/css/" . $path, $isAdmin); }
function absoluteTemplatePath($path, $isAdmin=null) { return absolutePath("project/css/" . $path, $isAdmin); }

function cssPath($path) { return templatePath($path); }
function absoluteCssPath($path) { return absoluteTemplatePath($path); }

function imagePath($path, $isAdmin=null) { return liveSite("project/images/" . $path, $isAdmin); }
function absoluteImagePath($path, $isAdmin=null) { return absolutePath("project/images/" . $path, $isAdmin); }

function jsPath($path, $isAdmin=null) { return liveSite("project/js/" . $path, $isAdmin); }
function absoluteJsPath($path) { return absolutePath("/project/js/" . $path); }
function libJsPath($path) { return configValue("liveSite") . "/lib/js/" . $path; }
function libCssPath($path) { return configValue("liveSite") . "/lib/css/" . $path; }

function extLibPath($path) 
{ 
  if (isFullLink($path)) return $path;
  $path = removeAbsolutePath(absoluteExtLibPath($path));
  return liveSite($path, false);
}

function absoluteExtLibPath($path) 
{ 
  $absolutePath = absolutePath("extlib/" . F069bd4b7()->mode() . "/" . $path, false);
  if (is_file($absolutePath)) return $absolutePath;
  return absolutePath("extlib/common/" . $path, false);
}

function filePath($filename) { return absolutePath() . "/" . $filename . ".php"; }
function useFile($path, $isFullPath=false) { if ($isFullPath) require_once($path); else require_once(filePath($path)); }
function useFileStrict($path, $isFullPath=false) 
{ 
  F069bd4b7()->fullAccess = true; 
  try
  {
    if ($isFullPath) require_once($path); else require_once(filePath($path)); 
  }
  finally {F069bd4b7()->fullAccess = false; }
}

function libPath($filename) 
{ 
  if (is_file(configValue("absolutePath") . "/lib/" . $filename . ".php")) return configValue("absolutePath") . "/lib/" . $filename . ".php";
  return configValue("absolutePath") . "/kernel/" . $filename . ".php"; 
}

function useLib($filename) { require_once(libPath($filename)); }

function siteLibPath($filename) { return absolutePath() . "/project/lib/" . $filename . ".php"; }
function useSiteLib($filename) { require_once(siteLibPath($filename)); }

function componentPath($filename) { return componentFilePath($filename) . ".php"; }
function componentFilePath($filename)
{
  if (isSystemFolder($filename)) return configValue("absolutePath") . "/" . adminPanelFolder() . "/components/" . $filename;
  return configValue("absolutePath") . "/components/" . $filename;
}
function componentLivePath($filename)
{
  if (isSystemFolder($filename)) return configValue("liveSite") . "/" . adminPanelFolder() . "/components/" . $filename;
  return configValue("liveSite") . "/components/" . $filename;
}
function useComponentFile($filename) { require_once(componentPath($filename)); }
function useComponentFileStrict($filename) 
{ 
  F069bd4b7()->fullAccess = true; 
  try
  {
    useComponentFile($filename);
  }
  finally {F069bd4b7()->fullAccess = false; }
}

function uploadedFile($componentName, $fileName) { return configValue("liveSite") . "/images/uploaded/" . $componentName . "/" . $fileName; }
function uploadedFileAbsolute($componentName, $fileName) { return configValue("absolutePath") . "/images/uploaded/" . $componentName . "/" . $fileName; }
function uploadedComponentPath($componentName) { return configValue("absolutePath") . "/images/uploaded/" . $componentName; }


function select($sql, $limitstart=null, $limit=null, $metaTask=null) { return F069bd4b7()->database->select($sql, $limitstart, $limit, $metaTask); }
function silentSelect($sql, $limitstart=null, $limit=null, $metaTask=null) { try { select($sql, $limitstart, $limit); } catch(Exception $e) {} }
function execute($sql, $logged=true) { F069bd4b7()->database->execute($sql, $logged); }
function silentExecute($sql, $logged=false) { try { Execute($sql, $logged); } catch(Exception $e) {} }
function sqlBetween($field, $value1=null, $value2=null) 
{
  if (!isEmpty($value1) && !isEmpty($value2)) return $field . " BETWEEN " . sqlParam($value1) . " AND " . sqlParam($value2);
  if (!isEmpty($value1)) return $field . " >= " . sqlParam($value1);
  if (!isEmpty($value2)) return $field . " <= " . sqlParam($value2);
}

function shiftBlockByLastLine($str, $offset=0, $clearEmptyLines=false, $char=" ")
{
  $arr = explodeOf("\n", $str);
  if (isEmpty($arr)) return;
  $startIndex = $textOffset = 0;
  for($i = 0; $i<=count($arr) - 1; $i++) if (!isEmpty($arr[$i])) { $startIndex = $i; break; }
  for($i = count($arr) - 1; $i>=0; $i--) if (!isEmpty($arr[$i])) { $textOffset = textOffset($arr[$i]); break; }
  if ($textOffset) $arr[$startIndex] = str_repeat($char, $textOffset) . trim($arr[$startIndex]);
  return shiftBlock($arr, $offset, $clearEmptyLines, $char);
}

function shiftBlock($block, $offset=0, $clearEmptyLines=false, $char=" ")
{
  if (isEmpty($block)) return;
  if (is_string($block)) $arr = explodeOf("\n", $block); else $arr = $block;

  $minOffset = null;
  foreach($arr as $str) 
  {
    if (isEmpty($str)) continue;
    $textOffset = textOffset($str);
    if ($minOffset === null || $minOffset > $textOffset) $minOffset = $textOffset;
  }
  $Result = [];
  foreach($arr as &$str) if (!$clearEmptyLines || !isEmpty($str)) $Result[] = str_repeat($char, $offset) . substr($str, $minOffset);

  return implode("\n", $Result);
}

function blockOffset($str, $offset=0, $char=" ")
{
  $arr = explodeOf("\n", $str);
  $Result = [];

  $noOffset = false;
  $offsetStr = str_repeat($char, $offset);
  for($i=0; $i<countOf($arr); $i++) 
  {
    if (!$noOffset && trimOf($arr[$i]) == "") continue;
    if ($noOffset) $Result[] = $arr[$i]; else $Result[] = $offsetStr . $arr[$i];
    if (stristr($arr[$i], "<textarea") !== false) $noOffset = true;
    if (stristr($arr[$i], "</textarea") !== false) $noOffset = false;
  }

  return implode("\n", $Result);
}

function scriptOffset($str, $offset=0, $char=" ", $clearEmptyLines=false)
{
  $arr = explodeOf("\n", $str);
  $Result = [];

  $trimOffset = null;
  for($i=0; $i<countOf($arr); $i++)
  {
    if (!trimOf($arr[$i])) continue;
    $trimOffset = textOffset($arr[$i], $char);
    break;
  }

  $lastOffset = 0;
  $notEmptyFound = false;
  for($i=0; $i<countOf($arr); $i++)
  {
    if (!trimOf($arr[$i]) && (!$clearEmptyLines || !$notEmptyFound)) continue;
    $notEmptyFound = true;
    if (!$trimOffset || textOffset($arr[$i], $char) >= $trimOffset)
    {
      $Result[] = str_repeat($char, $offset) . substr($arr[$i], $trimOffset);
      $lastOffset = textOffset(lastItem($Result), $char);
    }
    else $Result[] = str_repeat($char, $lastOffset) . $arr[$i];
  }

  return implode("\n", $Result);
}

function trimmedBlockOffset($str, $offset=0, $char=" ")
{
  $arr = explodeOf("\n", $str);
  $Result = [];

  for($i=0; $i<countOf($arr); $i++) if (trimOf($arr[$i])) $Result[] = str_repeat($char, $offset) . trimOf($arr[$i]);

  return implode("\n", $Result);
}

function absoluteOffset($str, $offset=0, $char=" ", $clearEmptyLines=false)
{
  if (isEmpty($str)) return;
  $arr = explodeOf("\n", $str);

  $minOffset = null;
  foreach($arr as $str) 
  {
    if (isEmpty($str)) continue;
    $textOffset = textOffset($str);
    if ($minOffset === null || $minOffset > $textOffset) $minOffset = $textOffset;
  }

  $Result = [];
  foreach($arr as &$str) if (!$clearEmptyLines || !isEmpty($str)) $Result[] = str_repeat($char, $offset) . substr($str, $minOffset);

  return implode("\n", $Result);
}

function clearAbsoluteOffset($str, $offset=0, $char=" ") { return absoluteOffset($str, $offset, $char, true); }

function tableValue($tableName, $keyValues, $fieldName="name", $keyFields="ident")
{
  $keyFields = Fa6c98557::param($keyFields);
  if (!is_array($keyValues)) $keyValues = [$keyValues]; 
  if (countOf($keyValues) != countOf($keyFields)) throwError("Count of keyFields <> count of keyValues");

  $query = Fffeae31a::create(fieldQuote($fieldName), $tableName);
  reset($keyValues);
  foreach($keyFields as $keyField)
  {
    $value = current($keyValues);
    $query->addSelect(fieldQuote($keyField))->addWhereFieldValue($keyField, $value);
    next($keyValues);
  }
  $rows = $query->select(); 
  if ($rows) return $rows[0]->$fieldName;
}

function tableRow($tableName, $keyValues, $keyField="ident", $selectedFields="*", $withMetaData=false)
{
  if (!$keyValues) return;
  if (!is_array($keyValues)) $keyValues = [$keyValues];
  if ($selectedFields == "*") $selectedFields = fieldQuote($tableName) . "." . $selectedFields;
  $query = Fffeae31a::create(
    $selectedFields, 
    $tableName, 
    fieldName($keyField, $tableName) . " IN (" . implode(",", Fa6c98557::sqlParam($keyValues)) . ")"
  )->addLimit(1);
  if ($withMetaData) $query->metaTask($tableName); 
  $rows = $query->select();
  if ($rows) return $rows[0];
}

function tableQuery($tableName, $whereCondition="", $ordering="ordering", $selectedFields="*", $withMetaData=false, $limit=null)
{
  if (is_array($whereCondition)) $whereCondition = implode(" AND ", $whereCondition);
  $query = Fffeae31a::create()->addSelect($selectedFields)->addFrom($tableName)->addWhere($whereCondition)->addOrder($ordering);
  if ($withMetaData) $query->metaTask($tableName);
  if ($limit) $query->addLimit($limit); 
  return $query;
}

function tableRows($tableName, $whereCondition="", $ordering="ordering", $selectedFields="*", $withMetaData=false, $limit=null)
{
  return tableQuery($tableName, $whereCondition, $ordering, $selectedFields, $withMetaData, $limit)->select();
}

function tableIdents($tableName, $whereCondition="", $ordering="ordering")
{
  $rows = tableRows($tableName, $whereCondition, $ordering, "ident"); 
  if ($rows) return Fa6c98557::fieldArray($rows, "ident");
}

function tableCount($tableName, $whereCondition="")
{
  $rows = tableRows($tableName, $whereCondition, "", "COUNT(*) AS tableCount");
  if (@$rows[0]) return $rows[0]->tableCount;
}

function prepareParam($value) { return F069bd4b7()->database->prepareParam($value); }
function sqlParam($value) { return F069bd4b7()->database->quote(prepareParam($value)); }
function sqlQuote($value) { return F069bd4b7()->database->quote(prepareParam($value)); }
function sqlFieldQuote($value) { return F069bd4b7()->database->fieldQuote(prepareParam($value)); }
function processFilter($value, $htmlMode=false)
{
  if (!$htmlMode) $iFilter = new Faefde645(); else $iFilter = new Faefde645(null, null, 1, 1);
  return $iFilter->process($value); 
}

function metadata($componentTable, $componentIdent, $fieldName=null)
{
  $query = Fffeae31a::create(
    "[tableName].ident",
    "[tableName]",
  )->clearParams(["tableName" => $componentTable])->metaTask($componentTable);
  if ($componentIdent) $query->addWhere($componentTable . ".ident = " . $componentIdent);
  $rows = $query->select();
  if (!$rows) return;

  if (!$fieldName) return $rows[0];
  return $rows[0]->$fieldName;
}

function setRowMetadata(&$row, $componentTable)
{
  $metaRow = metadata($componentTable, $row->ident);
  if (!$metaRow) return;

  $fields = ["url", "metatitle", "metakeys", "metadesc", "robot_index", "robot_follow", "tags", "metatags", "cached", "og_title", "og_description", "og_image"];
  foreach($fields as $field) if ($metaRow->$field) $row->$field = $metaRow->$field;
}

function rowByUrl($url)
{
  $row = tableRow("sys_meta", $url, "url");
  if (!$row) return;

  $resultRow = tableRow($row->task, $row->task_ident);
  $resultRow->__task = $row->task;
  $resultRow->__task_ident = $row->task_ident;

  return $resultRow;
}

function lastItem($object, $offset=0)
{
  if (!is_array($object) && !is_string($object)) return;
  if (countOf($object)-1-$offset == -1) return;
  return $object[countOf($object)-1-$offset];
}

function fileExtension($filename) { if ($filename) return pathinfo($filename, PATHINFO_EXTENSION); }
function clearFileName($filename) { if ($filename) return pathinfo($filename, PATHINFO_FILENAME); }
function fileName($filename) 
{ 
  if (!$filename) return;
  $ext = fileExtension($filename);
  return clearFileName($filename) . ifElse($ext, "." . $ext); 
}

function classVarExists($className, $propertyName)
{
  $array = get_class_vars($className);
  if ($array) foreach($array as $key=>$item) if ($key == $propertyName) return true;
  return false;
}

function individualClassProperties($className)
{
  return array_diff(Fa6c98557::keysArray(get_class_vars($className)), Fa6c98557::keysArray(get_class_vars(get_parent_class($className))));
}

function ieVersion() 
{
  preg_match("/MSIE ([0-9]\.[0-9])/", urlParam("HTTP_USER_AGENT", "SERVER"), $reg);
  if(isset($reg[1])) return floatval($reg[1]);
  if (strpos(urlParam("HTTP_USER_AGENT", "SERVER"), "rv:11.0") !== false) return "11";
}

function isIE()
{
  return (ieVersion() <> "");
}

function isChrome()
{
  $Result = stristr(urlParam("HTTP_USER_AGENT", "SERVER"), "Chrome");
  return !empty($Result);
}

function isSafari()
{
  $Result = stristr(urlParam("HTTP_USER_AGENT", "SERVER"), "Safari");
  return !empty($Result);
}

function isIos()
{
  if (
    stripos($_SERVER['HTTP_USER_AGENT'], "iPod")
    || stripos($_SERVER['HTTP_USER_AGENT'], "iPhone")
    || stripos($_SERVER['HTTP_USER_AGENT'], "iPad")
    || stripos($_SERVER['HTTP_USER_AGENT'], "Android")
    || stripos($_SERVER['HTTP_USER_AGENT'], "webOS")
  ) return true;
}

function isMobile()
{
  $useragent=$_SERVER['HTTP_USER_AGENT'];
  return preg_match('/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i',$useragent)||preg_match('/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i',substr($useragent,0,4));
}

function rowsEqual($rows1, $rows2, $compareFields)
{
  if (!is_array($rows1) || !is_array($rows1)) return countOf($rows1) == countOf($rows2);
  $equal = countOf($rows1) == countOf($rows2);
  if (!$equal) return;
  if (isEmpty($rows1)) return true;

  foreach($rows1 as $row1)
  { 
    $found = false;
    foreach($rows2 as $row2)
    {
      $compareResult = true;
      foreach($compareFields as $compareField) if ($row1->$compareField != $row2->$compareField) { $compareResult = false; break; }
      if ($compareResult) { $found = true; $break; }
    }
    if (!$found) return false;
  }

  return true;
}

function getSpacer($width, $height, $cssClass=null)
{
  return F120d5404::create(imagePath("spacer.gif"), $cssClass)->attrs(["width" => $width, "height" => $height]);
}

function strictSpacerCell($width, $height, $colspan=1, $class=null)
{
  $cell = spacerCell($width, $height, $colspan, $class);
  $cell->width = $width;
  return $cell;
}

function spacerCell($width, $height, $colspan=1, $class=null)
{
  if (!$width) $width = 1;
  if (!$height) $height = 1;

  $cell = F532ab2bc::create(getSpacer($width, $height), $class);
  $cell->colspan = $colspan;

  return $cell;
}

function strictSpacerRow($width, $height, $colspan=1, $class=null)
{
  $row = spacerRow($width, $height, $colspan, $class);
  $row->cells[0]->height = $height;
  return $row;
}

function spacerRow($width, $height, $colspan=1, $class=null)
{
  $row = Faae3f18e::create();
  $row->addClass($class);
  $row->objects[] = spacerCell($width, $height, $colspan);

  return $row;
}

function echoStr($str) { echo $str . "<br>"; }
function echoTime($title) { echo "<b>" . $title . ":</b> " . date("G:i:s") . "<br/>"; }

function getTinyUrl($url) 
{
  try
  {
    $fp = fopen("http://tinyurl.com/api-create.php?url=" . $url, "r" );
    if ( $fp ) 
    {
      $tinyurl = fgets( $fp );
      if( $tinyurl && !empty($tinyurl) ) $url = $tinyurl;
      fclose( $fp );
    }
  } 
  catch (Exception $e) { return $url; }

  return $url;
}

function objectProperties($object)
{
  if (!is_array($object)) $arr = (array)$object; else $arr = $object;
  $Result = [];
  foreach($arr as $key=>$value) $Result[] = $key;

  return $Result;
}

function setObjectProperties(&$object, $properties, $strict=false)
{
  if (!$properties) return;
  $vars = get_object_vars($object);
  foreach($properties as $key=>$val)
  {
    if ($strict && !array_key_exists($key, $vars)) continue;
    $object->$key = $val;
  }
}

function bindObject(&$target, $source, $strict=false, $exclude=null) 
{
  if (!$source || !$target) return;
  if (!$exclude) $exclude = []; else $exclude = Fa6c98557::param($exclude);

  foreach(objectProperties($source) as $property) 
  {
    if (in_array($property, $exclude)) return;
    if ($strict && fieldExists($target, $property) || fieldExists($source, $property)) 
      setFieldValue($target, $property, fieldByName($source, $property));
  }
      
  return $target;
}

function bindObjectProperties(&$target, $source, $properties) 
{
  if (!$source || !$target) return;
  $properties = Fa6c98557::param($properties);
  foreach($properties as $property) setFieldValue($target, $property, fieldByName($source, $property));
  return $target;
}

function createStdClass($properties=null) 
{
  $Result = new stdClass();
  if ($properties) foreach($properties as $key=>$value) $Result->$key = $value;
  return $Result;
}

function childClassesOf($className)
{
  $children = [];
  foreach(get_declared_classes() as $class) if(is_subclass_of($class, $className)) $children[] = $class;
  return $children;
}



function roundNumber($Number, $Digits) { return round($Number, $Digits); }

function floorNumber($value, $digits)
{
  $count = round(pow(10, $digits));
  return floor($value * $count) / $count;
}

function ceilNumber($value, $digits)
{
  $count = round(pow(10, $digits));
  return ceil($value * $count) / $count;
}

function isEmpty($object)
{
  if (is_null($object)) return true;
  if (is_string($object) && trimOf($object) == "") return true;
  if (is_array($object) && !countOf($object)) return true;
  if (is_object($object) && !countOf(objectProperties($object))) return true;
}

function isEmptyDate($date)
{
  if (is_null($date)) return true;
  if (!$date) return true;
  if ($date == "0000-00-00") return true;
  if ($date == "0000-00-00 00:00:00") return true;
  if ($date == "1980-01-01") return true;
  if ($date == "1980-01-01 00:00:00") return true;

  return false;
}

function signOf($value) { if ($value < 0) return -1; else return 1; }
function isEven($value) { return ($value % 2 == 0); }

function getHash($seed) { return md5(configValue("hashStr") . md5($seed)); }
function parseBrackets($code, $brackets="[]")
{
  $Result = [];
  $pattern = '#(\\' . $brackets[0] . '.+\\' . $brackets[1] . ')#sUi';
  $Result["var"] = preg_replace($pattern, '', $code);
  preg_match('/\\' . $brackets[0] . '(.*)\\' . $brackets[1] . '/', $code, $arr);
  if ($arr) $Result["index"] = $arr[1]; else $Result["index"] = null;

  return $Result;
}

function fullPath($url) { if (isFullLink($url)) return $url; else return liveSite(addUrlLang($url)); }
function inTag($str, $tagName, $cssClass=null)
{
  return quote($tagName . ifElse($cssClass, " class=" . quote($cssClass)), "<", ">") . $str . quote($tagName, "</", ">");
}
function bold($str) { return inTag($str, "b"); }
function italic($str) { return inTag($str, "i"); }
function small($str) { return inTag($str, "small"); }

function oneStr($desc)
{
  $desc = str_replace("\r\n", " ", $desc);
  $desc = str_replace("\n", " ", $desc);
  return $desc;
}
function jsString($desc) { if ($desc) return oneStr(str_replace("'", "\"", $desc)); }
function jsParam($text) { return quote(addSlashes(oneStr($text))); }
function jsData($text) { return htmlspecialchars(oneStr($text), ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401); }

function pobs($str) { return $str; }

function get_request($url)
{
  $content = "";
  $fp = @fopen($url,"r");
  if ($fp)
  {
    while(!feof($fp)) $content .= fread($fp,1024);
    fclose($fp); 
  }

  return $content;
}

function post_request($url, $data, $referer="") 
{
  $data = http_build_query($data);

  $opts = [
    'http' => [
      'method'  => 'POST',
      'header'  => 'Content-type: application/x-www-form-urlencoded',
      'content' => $data
    ]
  ];
  $context = stream_context_create($opts);

  return file_get_contents($url, false, $context);
}

function postRedirect($url, $data) 
{
  $form = Fe63faebb::create()->attrs([
    "id" => "post_redirect_form",
    "action" => $url
  ]);
  foreach ($data as $key=>$value) $form->objects[] = new F0fd29b1f(htmlentities($key), htmlentities($value));
  $script = new F68125698("document.getElementById('post_redirect_form').submit();");
  echo F606c225c::create([$form, $script])->show();
}

function curlPost($url, $postFields) 
{
  $ch = curl_init();
  try
  {
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields); 
    curl_setopt($ch, CURLOPT_URL, $url);
    $output = curl_exec($ch);
  } 
  finally { curl_close($ch); }
  return $output;
}

function post_async($url, $params = null)
{
  $post_string = "";
  if ($params) 
  {
    foreach ($params as $key => &$val) 
    {
      if (is_array($val)) $val = implode(',', $val);
      $post_params[] = $key . '=' . urlencode($val);  
    }
    $post_string = implode('&', $post_params);
  }

  $parts = parse_url($url);

  $fp = fsockopen($parts['host'], isset($parts['port']) ? $parts['port'] : 80, $errno, $errstr, 30);
  if ($errno) throwError("fsockopen error " . $errstr);
  try
  {
    $out = "POST " . $parts['path'] . " HTTP/1.1\r\n";
    $out.= "Host: " . $parts['host'] . "\r\n";
    $out.= "Content-Type: application/x-www-form-urlencoded\r\n";
    $out.= "Content-Length: " . strlen($post_string) . "\r\n";
    $out.= "Connection: Close\r\n\r\n";
    if (!isEmpty($post_string)) $out .= $post_string;
    fwrite($fp, $out);
  }
  finally { fclose($fp); }
}

function urlExists($url)
{
  $ch = curl_init($url);
  curl_setopt($ch, CURLOPT_NOBODY, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_exec($ch);
  $Result = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  curl_close($ch);
  if ($Result == 200) return true;
}

function getFileArray($folderPath)
{
  if (!pathValid($folderPath)) return;
  $files = [];

  $dir = @scandir($folderPath);
  if (!$dir) return;
  foreach($dir as $file) 
  {
    $fileName = $folderPath . "/" . $file;
    if (!@is_file($fileName)) continue;
    $files[] = $fileName;
  }

  return $files;
}

function dirFiles($dirName, $mode=null)
{
  if (!pathValid($dirName)) return;
  try { $handle = opendir($dirName); } catch (Exception $e) { return false; }
  if (!$handle) return;
  $mode = mb_strtolowerOf($mode);

  $Result = [];
  while (false !== ($file = readdir($handle))) 
  {
    if (($file == '.') || ($file == '..')) continue;
    if ($mode == "file" && !is_file($dirName . "/" . $file)) continue;
    if ($mode == "folder" && !is_dir($dirName . "/" . $file)) continue;
    $Result[] = $file;
  }
  closedir($handle); 

  return $Result;
}

function clearDir($path) 
{
  if (!pathValid($path)) return;
  if (!@is_dir($path)) return;
  if ($files = @dirFiles($path)) foreach($files as $file) 
  {
    $fileName = $path . "/" . $file;
    if (@is_dir($fileName)) removeDir($fileName); else @unlink($fileName);
  }
}

function removeDir($path) 
{ 
  if (!pathValid($path)) return;
  if (is_dir($path)) { clearDir($path); @rmdir($path); } 
}

function copyDir($from, $to, $rewrite=false) 
{
  if (!pathValid($from) || !pathValid($to)) return;
  if (!is_dir($from)) return;
  if (!is_dir($to)) mkdir($to, "0775");

  if ($files = dirFiles($from)) foreach($files as $file) 
  {
    $fromFile = $from . "/" . $file;
    $toFile = $to . "/" . $file;

    if (is_dir($fromFile)) 
    {
      if (is_dir($toFile)) if ($rewrite) removeDir($toFile); else continue;
      copyDir($fromFile, $toFile);
    }
    else
    {
      if (is_file($toFile)) if ($rewrite) unlink($toFile); else continue;
      copy($fromFile, $toFile);
    }
  }
}

function copyFile($sourceFile, $targetField)
{
  if (!pathValid($sourceFile)) return;
  return copy(str_replace(basename($sourceFile), rawurlencode(rawurldecode(basename($sourceFile))), $sourceFile), $targetFilePath);
}

function yandexTranslate($text, $langTo, $langFrom=null, $format="plain")
{
  $text = urldecode($text);
  $originalText = $text;
  if (mb_strlenOf($text) > 10000) 
  {
    $text = stripTags($text);
    if (mb_strlenOf($text) > 10000) return $originalText;
  }
  $text = urlencode($text);

  if ($langFrom == "ua") $langFrom = "uk";
  if ($langTo == "ua") $langTo = "uk";
  if ($langFrom) $lang = $langFrom . "-" . $langTo; else $lang = $langTo;

  $url = "https://translate.yandex.net/api/v1.5/tr.json/translate?key=trnsl.1.1.20140909T160836Z.5276276f3ce2f581.49c4bf93646c850bcbf0848233ae16ed2bb92de7&lang=" . $lang . "&format=" . $format;
  $curl = curl_init($url);
  curl_setopt($curl, CURLOPT_FAILONERROR, 1);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);
  curl_setopt($curl, CURLOPT_POST, true);
  curl_setopt($curl, CURLOPT_POSTFIELDS, "&text=" . $text);

  $data = curl_exec($curl); 
  curl_close($curl);
  if (!$data) return $originalText;

  $arr = json_decode($data);
  if (!$arr) return $originalText; 
  return @$arr->text[0];
}

function googleTranslate($text, $langTo, $langFrom=null)
{ 
  $text = urldecode($text);

  if ($langFrom) $langFrom = tableValue("sys_lang", $langFrom, "iso", "prefix");
  if ($langTo) $langTo = tableValue("sys_lang", $langTo, "iso", "prefix");
  require_once(absoluteExtLibPath("/stichoza/vendor/autoload.php"));
  $translator = new Stichoza\GoogleTranslate\GoogleTranslate();
  try
  {
    return textTranslateSplitter($text, 2500, function($text) use ($translator, $langFrom, $langTo) {
      sleep(0.2);
      return $translator->setSource($langFrom)->setTarget($langTo)->translate($text);
    });
  } 
  catch (Exception $e) { trace($e->getMessage()); return $text; }
}

function chatGTPTranslate($source, $langTo, $langFrom=null)
{
  if (isEmpty($source)) return;
  $html = chatGTP([ 
    ["role" =>  "system", "content" =>  "переведи текст и верни в виде html"],
    ["role" =>  "user", "content" =>  urldecode($source)],
    ["role" =>  "user", "content" =>  "translate to " . $langTo],
    ["role" =>  "user", "content" =>  "do not translate file names"],
  ]);
  if ($html) $Result = trim(textBetween($html, "```html", "```"));
  if (!$Result) $Result = $html;
  return $Result;
}

function translationService($text, $langTo, $langFrom=null)
{
  if (isEmpty(configValue("chatGTPApiKey"))) return googleTranslate($text, $langTo, $langFrom);
  return chatGTPTranslate($text, $langTo, $langFrom);
}


function textTranslateSplitter($html, $strLength, $translateFunction)
{
  $i = 0; $tags = [];
  $newHtml = preg_replace_callback ("/<([^>]*?)>/", function($matches) use (&$i, &$tags) {
    $tags[$i] = $matches[0];
    return "[~" . $i++ . "~]";
  }, $html); 

  $startTagReplacer = "[~"; $endTagReplacer = "~]"; 

  $translated = tagWordSplitter($newHtml, $strLength, "[~", "~]");
  foreach($translated as &$translatedStr) $translatedStr = $translateFunction($translatedStr);
    
  return preg_replace_callback ("/\[~(.*?)~\]/", function($matches) use (&$i, &$tags) {
    return $tags[intVal($matches[1])];
  }, implode("", $translated)); 
}

function tableClassPrefix($tableName)
{
  $tableNameArray = explodeOf("_", $tableName);
  $classPrefix = "";
  foreach($tableNameArray as $item)
  {
    if ($item == $tableNameArray[0]) $str = mb_strtolowerOf($item); else $str = capitalize($item);
    $classPrefix .= $str;
  }

  return $classPrefix;
}

function translate($key, $lang=null) 
{ 
  if (!$lang) $lang = F069bd4b7()->lang;
  return @F069bd4b7()->translations[$lang][$key]; 
}

function attachLangFile($componentName, $path, $lang)
{
  $path .= ".php";
  $translationClassName = tableClassPrefix($componentName) . "Translation" . capitalize($lang);
  if (class_exists($translationClassName)) return;
  if (!is_file($path)) return;

  require_once($path);
  $translationClassName::add();

  return true;
}

function attachLang($componentName, $lang)
{
  $translationClassName = tableClassPrefix($componentName) . "Translation" . capitalize($lang); 

  $path = $componentName . "/lang/" . $lang;
  $filePath = componentPath($path);
  if (is_file($filePath)) 
  {
    require_once($filePath);
    $translationClassName::add();
    return true;
  }

  return false;
}

function dynamicImageUrl($width, $height, $fileName, $mode="crop")
{
  $url = "image.php";
  $url = Fe42c97f4::addParam($url, "path", $fileName);
  $url = Fe42c97f4::addParam($url, "width", $width);
  $url = Fe42c97f4::addParam($url, "height", $height);
  $url = Fe42c97f4::addParam($url, "mode", $mode);

  return configValue("liveSite") . "/" . $url;
}

function isoLang($lang) { if ($lang == "ua") return "uk"; else return $lang; }
function scrolledDiv($object, $width=null, $height=null)
{
  $div = Fdd72df16::create();
  $div->attr("id", newid());
  $div->style = "overflow-x: auto;position: relative;display: block;z-index: 0;";
  if ($width) $div->style .= "width: " . $width . "px;";
  if ($height) $div->style .= "height: " . $height . "px;";
    $innerDiv = Fdd72df16::create();
    $innerDiv->style = "display: block;position: absolute; top: 0px; left: 0px;";
    $innerDiv->objects[] = $object;
  $div->objects[] = $innerDiv;

  F68125698::readyToFinal("
    $('#" . $div->id . "').height($('#" . $div->id . "').children().height() + 20);
  ");

  return $div;
}

function newid() { return str_replace(".", "", uniqid("", true)); }
function stringsEqual($str1, $str2) 
{ 
  if (!isEmpty($str1) && !isEmpty($str2)) return trimOf(mb_strtolowerOf($str1)) == trimOf(mb_strtolowerOf($str2)); 
}

function objectByName($objects, $name, $propertyName="name")
{
  if ($objects) foreach($objects as &$object) 
  {
    if (is_object($object) && stringsEqual($object->$propertyName, $name)) return $object;
      else if (is_array($object) && stringsEqual($object[$propertyName], $name)) return $object;
  }
}

function fillPattern($pattern, $assocArray)
{
  if (!$pattern || !is_array($assocArray) || isEmpty($assocArray)) return $pattern;
  $isStringPattern = is_string($pattern);
  if ($isStringPattern) $pattern = F606c225c::create($pattern);
  $pattern->iterator(function(&$object) use($assocArray, $isStringPattern) {
    if (!is_string($object)) return;
    $patternVars = [];
    preg_match_all("/{(.*?)}/i", $object, $patternVars);
    if ($isStringPattern) foreach($patternVars[1] as $key) $object = str_replace(quote($key, "{", "}"), @$assocArray[$key], $object);
      else foreach($patternVars[1] as $key) if ($object == quote($key, "{", "}")) $object = @$assocArray[$key];
  });
  if ($isStringPattern) return $pattern->objects[0]; else return $pattern;
}

function fieldSetFromPost($fields, $asArray=true)
{
  if (!$fields) return;
  $fields = Fa6c98557::param($fields);
  $arr = [];
  $values = urlPostParam($fields[0]);
  if (!is_array($values)) return;
  for($i=0; $i < countOf($values); $i++) 
  {
    $row = [];
    foreach($fields as $field) $row[$field] = @urlPostParam($field)[$i];
    if ($asArray) $arr[] = $row; else $arr[] = (object)$row;
  }

  return $arr;
}

function openFile($absoluteFile, $fileTitle=null)
{
  $ext = fileExtension($absoluteFile);
  if ($fileTitle)
  {
    $arr = explodeOf(".", $fileTitle);
    if (lastItem($arr) != $ext) $fileTitle .= "." . $ext;
  }
  else $fileTitle = basename($absoluteFile);

  header("Content-Description: File Transfer");

  if ($ext == "pdf") header("Content-Type: application/pdf");
    else if ($ext == "doc") header("Content-Type: application/msword");
    else if ($ext == "docx") header("Content-Type: application/vnd.openxmlformats-officedocument.wordprocessingml.document");
    else if ($ext == "xls") header("Content-Type: application/vnd.ms-excel");
    else if ($ext == "xlsx") header("Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    else header("Content-Type: application/octet-stream");
  if ($ext == "pdf") header("Content-Disposition: inline; filename=\"" . sanitizeFileName($fileTitle) . "\"");
    else header("Content-Disposition: attachment; filename=\"" . sanitizeFileName($fileTitle) . "\"");

  header("Content-Transfer-Encoding: binary");
  header("Expires: 0");
  header("Cache-Control: must-revalidate");
  header("Pragma: public");
  header("Content-Length: " . filesize($absoluteFile));
  readfile($absoluteFile);
}

function ini_bytes($iniParam)
{
  $val = trimOf(ini_get($iniParam));
  $last = strtolowerOf($val[strlenOf($val)-1]);
  $val = substr($val, 0, strlenOf($val)-1);
  switch($last) 
  {
    case 'g': $val *= 1024;
    case 'm': $val *= 1024;
    case 'k': $val *= 1024;
  }

  return $val;
}

function ifElse($condition, $ifTrue, $ifFalse=null) { if ($condition) return $ifTrue; else return $ifFalse; }
function ifEmpty($condition, $result) { if (isEmpty($condition)) return $result; else return $condition; }
function ifNotEmpty($condition, $result) { if (!isEmpty($condition)) return $result; }
function appendIfNotEmpty($condition, $text) { if (!isEmpty($condition)) return $condition . $text; }

function clearControlName($name) 
{ 
  $clearName = parseBrackets(str_replace("[]", "", $name))["index"]; 
  if (!$clearName) $clearName = $name;
  return $clearName;
}

function fieldByName($object, $fieldName="name") { return @((array)$object)[$fieldName]; }
function fieldExists($object, $fieldName="name") { if (is_object($object)) return property_exists($object, $fieldName); return array_key_exists($fieldName, $object); }
function setFieldValue(&$object, $fieldName, $value) 
{ 
  if (!$object || !$fieldName) return;
  if (is_object($object)) $object->$fieldName = $value; else $object[$fieldName] = $value; 
}

function validateAccount($account, $mfo)
{
  $accountLength = strlenOf($account);
  $accountKey = $account[4];
  $account[4] = "0";
  $account = substr($mfo, 0, 5) . padr($account, 14, "0");
  $multiplier = "1371337137137137137";

  $sum = 0;
  for($i=0; $i<strlenOf($account); $i++) 
    $sum += lastItem((string)($account[$i] * $multiplier[$i]));
  $sum += $accountLength;
  $digit = lastItem((string)($sum)) * 7;
  return lastItem((string)$digit) == $accountKey;
}

function hex2rgb($hex) 
{
  $hex = str_replace("#", "", $hex);

  if(strlenOf($hex) == 3) 
  {
     $r = hexdec(substr($hex,0,1).substr($hex,0,1));
     $g = hexdec(substr($hex,1,1).substr($hex,1,1));
     $b = hexdec(substr($hex,2,1).substr($hex,2,1));
  } 
  else 
  {
     $r = hexdec(substr($hex,0,2));
     $g = hexdec(substr($hex,2,2));
     $b = hexdec(substr($hex,4,2));
  }
  return [$r, $g, $b];
}

function currentIP()
{
  if (getenv('REMOTE_ADDR')) $user_ip = getenv('REMOTE_ADDR');
    else if (getenv('HTTP_FORWARDED_FOR')) $user_ip = getenv('HTTP_FORWARDED_FOR');
    elseif (getenv('HTTP_X_FORWARDED_FOR')) $user_ip = getenv('HTTP_X_FORWARDED_FOR');
    elseif (getenv('HTTP_X_COMING_FROM')) $user_ip = getenv('HTTP_X_COMING_FROM');
    elseif (getenv('HTTP_VIA')) $user_ip = getenv('HTTP_VIA');
    elseif (getenv('HTTP_XROXY_CONNECTION')) $user_ip = getenv('HTTP_XROXY_CONNECTION');
    elseif (getenv('HTTP_CLIENT_IP')) $user_ip = getenv('HTTP_CLIENT_IP');
    else $user_ip = 'unknown';

  if (strlenOf($user_ip) > 15)
  {
    $ar = split(', ', $user_ip);
    for($i=sizeof($ar)-1; $i > 0; $i--)
    {
      if ($ar[$i] != '' and !preg_match('/[a-zA-Z୿À-ߝ/', $ar[$i])) { $user_ip = $ar[$i]; break; }
      if ($i == sizeof($ar) - 1) $user_ip = 'unknown';
    }
  }
  if(preg_match('/[a-zA-Zа-яА-Я]/', $user_ip)) $user_ip = 'unknown';

  return $user_ip;
}

function swap(&$x,&$y) { list($x,$y) = [$y, $x]; }
function translatedFieldName($fieldName, $lang) { if (F069bd4b7()->isBaseLang($lang)) return $fieldName; else return "_" . $lang . "_" . $fieldName; }

function sanitizeFileName($filename) 
{
  $filename_raw = $filename;
  $special_chars = ["?", "[", "]", "/", "\\", "=", "<", ">", ":", ";", ",", "'", "\"", "&", "$", "#", "*", "(", ")", "|", "~", "`", "!", "{", "}", "%", "+", chr(0)];
  $filename = preg_replace("#\x{00a0}#siu", ' ', $filename);
  $filename = str_replace($special_chars, '', $filename);
  $filename = str_replace(['%20', '+'], '-', $filename);
  $filename = preg_replace('/[\r\n\t -]+/', ' ', $filename);
  $filename = trimOf($filename, '.-_ ');
  return $filename;
}

function processSelectorChains($containerName=null)
{
  static $loaded; 
  if (@$loaded[$containerName]) return;
  $params = boolToStr(isset(F069bd4b7()->user)) . ", " . quote(sessionLostMessage());
  if ($containerName) $params .= ", " . quote($containerName);
  F68125698::readyToFinal("processSelectorChains(" . $params . ");");
  $loaded[$containerName] = true;
}

function logToFile($str, $clear=true)
{
  if (!$clear) $flag = FILE_APPEND; else $flag = null;
  file_put_contents(absolutePath("temp/__trace.log", false), $str, $flag);
}

function ajaxMode() { return isset($_REQUEST["_ajax"]); }
function pjaxMode() { return configValue("PJAX"); }
function throwError($errorString) { throw new Exception(print_r($errorString, true)); }
function throwAjaxError($errorString) { echo json_encode(["error" => $errorString]); exit; }
function addCookie($name, $value, $sec=null, $path="/", $domain=null, $secure=true, $httponly=true, $samesite="Lax") 
{ 
  if (!$sec) $sec = 60 * 60 * 24; 
  setCookie($name, $value, [
    "expires" => time() + $sec,
    "path" => $path,
    "domain" => $domain,
    "secure" => $secure,
    "httponly" => $httponly,
    "samesite" => $samesite
  ]); 
}
function deleteCookie($name) { unset($_COOKIE[$name]); setcookie($name, null, -1, "/"); }

function xmlentities($dirty)
{
  $doc = new DOMDocument();
  $fragment = $doc->createDocumentFragment();
  $fragment->appendChild($doc->createTextNode($dirty));
  return $doc->saveXML($fragment);
}

function createHtml($title, $body, $head=null)
{
  if (is_array($body)) $body = implode("\n", $body);
  if ($body) $body = "\n" . blockOffset($body, 6);

  if (is_array($head)) $head = implode("\n", $head);
  if ($head) $head = "\n" . clearAbsoluteOffset($head, 6);
  return "
    <!doctype html>
    <head>
      <meta http-equiv='Content-Type' content='text/html; charset=utf-8' />
      <title>" . $title . "</title>" . $head . "
    </head>
    <body>" . $body . "
    </body>
    </html>
  ";
}

function rangeClash($min1, $max1, $min2, $max2, $strict=false) 
{ 
  if ($strict) return !($max1 < $min2 || $min1 > $max2); 
  return !($max1 <= $min2 || $min1 >= $max2); 
}

function varLine($title, $value, $class=null)
{
  if (!$value) return;
  $Result = Fdd72df16::create([
    Fb87d7527::create($title . ": ", "title"),
    Fb87d7527::create($value, "value"),
  ], "var_line");
  $Result->addClass($class);
  return $Result;
}

function build_url($parts) 
{
  return (isset($parts['scheme']) ? "{$parts['scheme']}:" : '') . 
    ((isset($parts['user']) || isset($parts['host'])) ? '//' : '') . 
    (isset($parts['user']) ? "{$parts['user']}" : '') . 
    (isset($parts['pass']) ? ":{$parts['pass']}" : '') . 
    (isset($parts['user']) ? '@' : '') . 
    (isset($parts['host']) ? "{$parts['host']}" : '') . 
    (isset($parts['port']) ? ":{$parts['port']}" : '') . 
    (isset($parts['path']) ? "{$parts['path']}" : '') . 
    (isset($parts['query']) ? "?{$parts['query']}" : '') . 
    (isset($parts['fragment']) ? "#{$parts['fragment']}" : '');
}

function fileTypeExtensions($fileTypes)
{
  if (isEmpty($fileTypes)) return;
  $fileTypes = Fa6c98557::param($fileTypes);
  $arr = [
    "image" => ["jpeg", "jpe", "jpg", "gif", "png", "bmp", "svg"],
    "document" => ["doc", "xls", "docx", "xlsx", "pdf"],
    "video" => ["flv", "mp4"],
    "audio" => ["mp3"],
    "archive" => ["zip", "rar", "arj"]
  ];
  $Result = [];
  foreach($fileTypes as $fileType) $Result = Fa6c98557::merge($Result, $arr[$fileType]);
  return array_unique($Result);
}

function imageFromHtml($html)
{
  if (!$html) return;
  preg_match_all('/< *img[^>]*src *= *["\']?([^"\']*)/i', $html, $matches);
  $Result = [];
  if (@$matches[1]) foreach($matches[1] as $item) $Result[] = $item;
  return $Result;
}

function isImagePhpInPath($path) { return !isEmpty(trimOf(stristr($path, "image.php?"))); }
function phoneLink($phone, $phoneDigits=null)
{
  if (!$phoneDigits) $phoneDigits = preg_replace("/[^0-9+]/", "", $phone); else $phoneDigits = preg_replace("/[^0-9+]/", "", $phoneDigits);
  return F84f8b18b::create("tel:" . $phoneDigits, $phone, "tel")->attr("strict", true);
}
function emailLink($email)
{
  return F84f8b18b::create("malto:" . $email, $email)->attr("strict", true);
}

function punycode_encode($url)
{
  $parts = parse_url($url);
  if (!empty($parts['host'])) $parts['host'] = idn_to_ascii($parts["host"], IDNA_DEFAULT, INTL_IDNA_VARIANT_UTS46);
  return build_url($parts);
}

function removeBaseUrl($url, $base=null) 
{ 
  if (!$url) return;
  if ($base === null) $base = F069bd4b7()->base;
  if (!$base) return $url;
  $base = rtrim($base, "/");
  if (strpos($url, $base) === 0) $url = substr($url, mb_strlenOf($base));
  $url = ltrim($url, "/"); 
  if (!$url) $url = ".";
  return $url; 
}

function removeAbsolutePath($path) 
{ 
  $path = str_replace("\\", "/", $path);
  $absolutePath = str_replace("\\", "/", absolutePath(null, false));
  if (stripos($path, $absolutePath) === 0) $path = substr($path, mb_strlenOf($absolutePath) + 1);
  return $path; 
}

function myIp()
{
  if (getenv('REMOTE_ADDR')) $user_ip = getenv('REMOTE_ADDR');
    else if (getenv('HTTP_FORWARDED_FOR')) $user_ip = getenv('HTTP_FORWARDED_FOR');
    elseif (getenv('HTTP_X_FORWARDED_FOR')) $user_ip = getenv('HTTP_X_FORWARDED_FOR');
    elseif (getenv('HTTP_X_COMING_FROM')) $user_ip = getenv('HTTP_X_COMING_FROM');
    elseif (getenv('HTTP_VIA')) $user_ip = getenv('HTTP_VIA');
    elseif (getenv('HTTP_XROXY_CONNECTION')) $user_ip = getenv('HTTP_XROXY_CONNECTION');
    elseif (getenv('HTTP_CLIENT_IP')) $user_ip = getenv('HTTP_CLIENT_IP');
    else $user_ip = 'unknown';

  if (strlenOf($user_ip) > 15)
  {
    $ar = split(', ', $user_ip);
    for($i=sizeof($ar)-1; $i > 0; $i--)
    {
      if ($ar[$i] != '' and !preg_match('/[a-zA-Z୿À-ߝ/', $ar[$i])) { $user_ip = $ar[$i]; break; }
      if ($i == sizeof($ar) - 1) $user_ip = 'unknown';
    }
  }
  if(preg_match('/[a-zA-Z୿À-ߝ/', $user_ip)) $user_ip = 'unknown';

  return $user_ip;
}

function clearTranslation($task, $task_ident, $lang, $field, $table="sys_translate")
{
  F069bd4b7()->database->conditionalDelete($table, [
    "task" => $task,
    "task_ident" => $task_ident,
    "lang" => $lang,
    "field" => $field
  ]);
}

function storeTranslation($task, $task_ident, $lang, $field, $value, $table="sys_translate")
{
  clearTranslation($task, $task_ident, $lang, $field, $table);
  F069bd4b7()->database->insert($table, [
    "task" => $task,
    "task_ident" => $task_ident,
    "lang" => $lang,
    "field" => $field,
    "value" => $value
  ]);
}

function drawStars($value, $count=5)
{
  $stars = Fdd72df16::create(null, "stars_field");
  for($i=1; $i<=$count; $i++) 
  {
    $innerObject = null;
    if (Round($value) != $value && floor($value) == $i-1) 
      $innerObject = Fdd72df16::create(null, "partial")->css("width", 100 * ($value - floor($value)) . "%");
    $object = Fdd72df16::create($innerObject, "star" . ifElse($value >= $i, " active"));
    $stars->objects[] = $object;
  }
  return Fdd72df16::create($stars, "field");
}

function secToArray($secs)
{
  $Result = [];
  $Result["days"] = floor($secs / 86400);
  $secs = $secs % 86400;
  $Result["hours"] = floor($secs / 3600);
  $secs = $secs % 3600; 
  $Result["minutes"] = floor($secs / 60);
  $Result["secs"] = $secs % 60;
  return $Result;
}

function exceptionMessage($e)
{
  if (!$e) return;
  $message = $e->getMessage();
  $Result[] = "<b>" . $message . "</b><br>";
  $Result[] = $e->getFile() . ", line " . $e->getLine();
  $backtrace = $e->getTrace();
  foreach($backtrace as $item) if (@$item["file"]) 
  {
    $str = @$item["file"] . ", line " . @$item["line"];
    $additionalStr = "";
    if (@$item["class"]) $additionalStr = @$item["class"] . @$item["type"] . @$item["function"];
      else if (@$item["function"]) $additionalStr = $item["function"];
    $Result[] = $str . " " . brackets($additionalStr);
  }
  return implode("<br>", $Result);
}

function callStack()
{
  return (new Exception())->getTraceAsString();

  $backtrace = debug_backtrace();
  foreach($backtrace as $item)
  if (@$item["file"]) 
  {
    $str = @$item["file"] . ", line " . @$item["line"];
    $additionalStr = "";
    if (@$item["class"]) $additionalStr = @$item["class"] . @$item["type"] . @$item["function"];
      else if (@$item["function"]) $additionalStr = $item["function"];
    $Result[] = $str . " " . brackets($additionalStr);
  }
  return implode("<br>", $Result);
}

function arcticModalMode() { return urlParam('arcticModalMode'); }
function preloadGridFormMode() { return urlParam('_preloadGridFormMode'); }
function loadProjectScripts($arr)
{
  if (!is_array($arr)) $arr = [$arr];
  $arr["startScripts"] = F069bd4b7()->getScriptLog("start, startReady");
  $arr["finalScripts"] = F069bd4b7()->getScriptLog("final");
  $arr["readyFinalScripts"] = F069bd4b7()->getScriptLog("finalReady");
  $arr["scriptLinks"] = F069bd4b7()->getScriptLog("scriptLink");
  $arr["cssLinks"] = F069bd4b7()->getScriptLog("cssLink");
  return $arr;
}

function iterator($objects, $childField, $iterator, $parent=null)
{
  if (!$objects) return;
  foreach($objects as &$object) 
  {
    if ($iterator($object, $parent) === false) return false;
    if (@$object->$childField) if (iterator($object->$childField, $childField, $iterator, $object) === false) return false;
  }
}

function portionIterator($iterator, $nextPortionFunc, $portion, $startPosition=0)
{
  while(true)
  {
    $endPosition = $nextPortionFunc($startPosition, $portion);
    if ($endPosition === false) return;
    if ($iterator($startPosition, $endPosition) === false) return;
    $startPosition = $endPosition + 1;
  }
}

function portionArrayIterator($arr, $iterator, $portion)
{
  portionIterator(function($startPosition, $endPosition) use($arr, $iterator) {
    $iterator(array_slice($arr, $startPosition, $endPosition - $startPosition + 1));
  }, function($startPosition, $portion) use($arr) {
    if (countOf($arr) <= $startPosition) return false;
    return min(countOf($arr), $startPosition + $portion - 1);
  }, $portion);
}

function jsParams($params)
{
  if (!$params) return;
  $Result = [];
  foreach($params as $key=>$value) $Result[] = $key . ": " . jsString($value);
  return implode(",", $Result);
}

function isFunctionDisabled($name) { return in_array($name, explodeOf(",", ini_get("disable_functions"))); }
function setTimeLimit($limit) { if (!isFunctionDisabled("set_time_limit")) set_time_limit(6000); }
function isLocalHost() { return stristr(liveSite(), "/localhost/") || stristr(liveSite(), "/127.0.0.1/"); }


function crypto_rand_secure($min, $max)
{
  $range = $max - $min;
  if ($range < 1) return $min; 
  $log = ceil(log($range, 2));
  $bytes = (int) ($log / 8) + 1; 
  $bits = (int) $log + 1; 
  $filter = (int) (1 << $bits) - 1; 
  do {
      $rnd = hexdec(bin2hex(openssl_random_pseudo_bytes($bytes)));
      $rnd = $rnd & $filter; 
  } while ($rnd > $range);
  return $min + $rnd;
}

function makePassword($length, $mode = "uppercase, lowercase, disits")
{
  $token = "";
  $mode = Fa6c98557::param($mode);
  if (in_array("uppercase", $mode)) $codeAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  if (in_array("lowercase", $mode)) $codeAlphabet.= "abcdefghijklmnopqrstuvwxyz";
  if (in_array("digits", $mode)) $codeAlphabet.= "0123456789";
  $max = strlen($codeAlphabet);
  for ($i=0; $i < $length; $i++) $token .= $codeAlphabet[crypto_rand_secure(0, $max-1)];
  return $token;
}

function limitCPUUsage($maxLoading=null)
{
  if (!function_exists("sys_getloadavg")) return;
  if (!$maxLoading) $maxLoading = configValue("cpu_usage_limit");
  if (!$maxLoading) return;
  $load = sys_getloadavg();
  $i=0; 
  while ($load[0] > $maxLoading && $i < 10) { sleep(1); $i++; }
}

function isSvg($filePath) { return in_array(mime_content_type($filePath), ["image/svg", "image/svg+xml"]); }

function rowInRows($checkedRow, $rows)
{
  if (!$checkedRow || !$rows) return;
  if (is_array($checkedRow)) $checkedRow = (object)$checkedRow;
  if (!is_array($rows)) $rows = (array)$rows;
  $vars = get_object_vars($checkedRow);
  foreach($rows as $row)
  {
    $found = true;
    foreach($vars as $key=>$var)
    {
      $rowValue = ifElse(@$row->$key, @$row->$key, null);
      $varValue = ifElse($var, $var, null);
      if ($rowValue != $varValue) { $found = false; break; }
    }
    if ($found) return true;
  } 
}

function timeControl($func)
{
  $startTime = time();
  $Result = "<b>Start:</b> " . F8ae2d299::langDateTime(F8ae2d299::utcDateTime($startTime)) . "<br>";

  try { 
    ob_start();
    try
    {
      $funcResult = $func(); 
      if (!$funcResult) $funcResult = ob_get_contents();
      $Result .= $funcResult;
    }
    finally { ob_end_clean(); }
  } 
  finally { 
    $endTime = time();
    $Result .= "<br><b>End:</b> " . F8ae2d299::langDateTime(F8ae2d299::utcDateTime($endTime));
    $diff = F8ae2d299::timeDifference($startTime, $endTime);
    $Result .= "<br><b>Waiting time:</b> " . $diff->h . " hours " . $diff->i . " min " . $diff->s . " sec<br><br>";
  }
  return $Result;
}

function tempFileName($fieldName, $ext=null) { return $fieldName . '_' . md5(newid()) . ifElse($ext, "." . $ext); }

function nonce()
{
  return @$_SESSION["nonce"];
}

function addNonceToScript($script)
{
  if ($script) return str_replace("<script", "<script nonce=" . quote(nonce()), $script);
}

function CSP() 
{
  static $csp;
  if (!$csp && configValue("CSP") && nonce()) 
    $csp = trim(oneSpace(clearLineBreaks(str_replace("{RANDOM}", nonce(), configValue("CSP"))))); 
  return $csp;
}

function jsonRow($row) { if ($row) return (object)$row; }
function jsonRows($rows) 
{ 
  if (!$rows) return;
  foreach($rows as &$row) $row = (object)$row;
  return $rows; 
}

function withFile($fileName, $callback, $mode="c+", $lock=LOCK_EX)
{
  $Result = null;
  $fp = fopen($fileName, $mode); 
  try
  {
    $i = 0; 
    while (!flock($fp, $lock | LOCK_NB)) { sleep(100); if ($i++ >= 100) throw new Exception("File lock timeout reached: " . $fileName); }
    try
    {
      $Result = $callback($fp, $fileName);
    }
    finally { flock($fp, LOCK_UN); }
  }
  finally { fclose($fp); }
  return $Result;
}

function disableSqlMonitorFor($callback)
{
  $disableSqlMonitor = F069bd4b7()->disableSqlMonitor;
  F069bd4b7()->disableSqlMonitor = true;
  try { $callback(); } finally { F069bd4b7()->disableSqlMonitor = $disableSqlMonitor; }
}

function sessionLostMessage() { return sprintf(translate("SESSION_LOST"), liveSite()); }

function bootstrapBreakpointClass($prefix, $breakpoint, $class)
{
  if ($breakpoint && $breakpoint != "xs") $breakpoint .= "-"; else $breakpoint = "";
  return $prefix . "-" . $breakpoint . $class;
}

function fileAccept($extensions)
{
  if (isEmpty($extensions)) return;
  foreach($extensions as $extension) $Result[] = "." . $extension;
  return implode(", ", $Result);
}

function icoByExt($ext)
{
  if ($ext == "pdf") return "pdf"; 
    else if (in_array($ext, ["xls", "xlsx"])) return "xls"; 
    else if (in_array($ext, ["doc", "docx", "rtf"])) return "doc"; 
    else if (in_array($ext, ["jpeg","jpe","jpg", "gif", "png"])) return "image"; 
    else if (in_array($ext, ["zip","rar","arj"])) return "arc"; 
    else return "file"; 
}

function chatGTP($messages)
{
  $api_key = configValue("chatGTPApiKey");
  $url = 'https://api.openai.com/v1/chat/completions';

  $data = [
    "model" => configValue("chatGTPApiModel"),
    "messages" => $messages
  ];

  $options = [
      CURLOPT_URL => $url,
      CURLOPT_RETURNTRANSFER => true,
      CURLOPT_HTTPHEADER => [
          "Content-Type: application/json",
          "Authorization: Bearer " . $api_key
      ],
      CURLOPT_POST => true,
      CURLOPT_POSTFIELDS => json_encode($data)
  ];

  $ch = curl_init();
  curl_setopt_array($ch, $options);
  $response = curl_exec($ch);
  if ($response === false) throw new Exception("cURL Error: " . curl_error($ch));
  $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  curl_close($ch);

  $response_data = json_decode($response, true);
  if ($http_code !== 200) throw new Exception("Error: Received HTTP code $http_code\nResponse: " . $response);
  if (isset($response_data["choices"][0]["message"]["content"])) return $response_data["choices"][0]["message"]["content"];
  throw new Exception("Error: Unable to retrieve a valid response.\nFull Response: " . json_encode($response_data, JSON_PRETTY_PRINT));
}

function header404() { header('HTTP/1.0 404 Not Found'); header('HTTP/1.1 404 Not Found'); header('Status: 404 Not Found'); }
function urlValid($url) { return filter_var($url, FILTER_VALIDATE_URL) !== false; }
function pathValid($path) { return strpos($path, '..') === false; }

function increaseVersion()
{
  $versionStr = file_get_contents(absolutePath("configuration.php", false));
  preg_match('/var\s+\$version\s+=\s+\"(.*)\"/', $versionStr, $matches);
  if (isEmpty($matches[1])) throwError("Error loading version");
  $arr = explode(".", $matches[1]);
  $arr[count($arr) - 1] = intVal($arr[count($arr) - 1]) + 1;
  $version = implode(".", $arr);
  $Result = preg_replace('/var\s+\$version\s+=\s+\"(.*)\"/', 'var $version = "' . $version . '"', $versionStr);
  file_put_contents(absolutePath("configuration.php", false), $Result);
  return $version;
}


?>
